plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.0'
    id 'io.ktor.plugin' version '3.0.1'
    id 'com.google.devtools.ksp' version '2.1.0-1.0.29'
}

group "saplingsquad"
version "0.0.1"
mainClassName = "io.ktor.server.netty.EngineMain"

def h2_version = project.property("h2_version")
def logback_version = project.property("logback_version")
def postgres_version = project.property("postgres_version")
def kotlin_version = project.property("kotlin_version")
def komapper_version = project.property("komapper_version")
def openapi_validator_version = project.property("openapi_validator_version")

def isDevelopment = project.ext.has("development")
applicationDefaultJvmArgs = ["-Dio.ktor.development=$isDevelopment"]

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.ktor:ktor-server-cors-jvm"
    implementation "io.ktor:ktor-server-core-jvm"
    implementation "io.ktor:ktor-server-content-negotiation-jvm"
    implementation "io.ktor:ktor-serialization-kotlinx-json-jvm"
    implementation "org.postgresql:postgresql:$postgres_version"
    implementation "com.h2database:h2:$h2_version"
    implementation "io.ktor:ktor-server-netty-jvm"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-config-yaml-jvm"
    implementation "io.ktor:ktor-server-call-logging"
    implementation "io.ktor:ktor-server-openapi"
    implementation "io.ktor:ktor-server-double-receive"
    platform("org.komapper:komapper-platform:$komapper_version").with {
        implementation(it)
        ksp(it)
    }
    implementation "org.komapper:komapper-starter-r2dbc:$komapper_version"
    implementation "org.komapper:komapper-dialect-h2-r2dbc:$komapper_version"
    implementation "org.komapper:komapper-dialect-postgresql-r2dbc:$komapper_version"
    ksp "org.komapper:komapper-processor:$komapper_version"
    implementation "com.atlassian.oai:swagger-request-validator-core:$openapi_validator_version"

    testImplementation "io.ktor:ktor-server-test-host-jvm"
    testImplementation "io.ktor:ktor-client-content-negotiation"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

def generatedResources = layout.buildDirectory.dir("generated/copy-openapi-spec/main/resources/")

tasks.register("copy-openapi-spec", Copy) {
    from("../api")
    into(generatedResources.get().dir("api"))
}


tasks.named("processResources") {
    dependsOn "copy-openapi-spec"
}
sourceSets {
    configureEach {
        resources {
            srcDir(generatedResources)
        }
    }
}
