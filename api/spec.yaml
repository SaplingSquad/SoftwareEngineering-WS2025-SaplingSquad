openapi: 3.0.3
info:
  title: Sprout API
  description:
    Sprout is an application to match potential donators with fitting charitable associations. It provides an option for thos associations to present themselves as well as their projects with reduced effort and provides those informations in an interaktive way to the users.
  license:
    name: GNU Affero General Public License v3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  version: 1.0.0
tags:
  - name: user
    description: Operations for user management.
  - name: questions
    description: Operations about the initial questions.
  - name: map
    description: Operations concerning the map.
  - name: bookmarks
    description: Operations to manage bookmarks for a logged in user.
  - name: association
    description: Operations to manage associations and their projects.

paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User created successfully.
        '400':
          description: Invalid request data.
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system.
      description: Login for a registered user account.
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login.
          example: exampleuser
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text.
          example: supersecret
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                description: The temporary user token for session authentication.
        '400':
          description: Invalid username/password supplied
  /user/authentication:
    get:
      tags:
        - user
      summary: Autheticate user by user token.
      description: ''
      operationId: getUserByToken
      parameters:
        - name: userToken
          in: query
          description: The token to fetch name and icon url for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The name of the user.
                    example: exampleuser
                  icon:
                    type: string
                    format: binary
                    description: An icon image for the user's profile.

        '400':
          description: Invalid token supplied.
        '404':
          description: No user for this token found.
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userToken
          in: path
          description: Token for the change of account.
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user.
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userToken
          in: path
          description: The token from the user to be deleted.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user token supplied.
        '404':
          description: No user for this token found.

  /map/association/locations:
    get:
      tags:
        - map
      summary: Get list of associations locations.
      description: ''
      operationId: getAssociationsLocations
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    assocId:
                      type: integer
                      example: 1
                      description: Id of the association for the application.
                    location:
                      $ref: '#/components/schemas/Location'
  /map/association/informations/byId:
    get:
      tags:
        - map
      summary: Get association by Id.
      description: ''
      operationId: getAssociation
      parameters:
        - name: assocId
          in: query
          description: The Id of the association to fetch informations for.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationInformations'
  /map/association/informations:
    get:
      tags:
        - map
      summary: Get list of associations informations.
      description: ''
      operationId: getAssociations
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    schema:
                      $ref: '#/components/schemas/AssociationInformations'
  /map/projects/locations:
    get:
      tags:
        - map
      summary: Get list of all ongoing projects locations.
      description: ''
      operationId: getProjectsLocations
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    project:
                      type: integer
                      example: 1
                      description: Id of the project for the application.
                    location:
                      $ref: '#/components/schemas/Location'
  /map/project/informations/byId:
    get:
      tags:
        - map
      summary: Get project by projectId.
      description: ''
      operationId: getProject
      parameters:
        - name: projectId
          in: query
          description: The Id of the project to fetch informations for.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInformations'
  /map/project/informations:
    get:
      tags:
        - map
      summary: Get list of project informations.
      description: ''
      operationId: getProjects
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    schema:
                      $ref: '#/components/schemas/AssociationInformations'
  /map/region/locations:
    get:
      tags:
        - map
      summary: Get list of regions on the map.
      description: ''
      operationId: getRegions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                      regionId:
                        type: integer
                        example: 1
                        description: The Id of the region.
                      name:
                        type: string
                        example: Tropical Zone
                        description: Name of the region.
                      location:
                        $ref: '#/components/schemas/Location'
  /map/region/informations/byId:
    get:
      tags:
        - map
      summary: Get region by Id.
      description: ''
      operationId: getRegion
      parameters:
        - name: regionId
          in: query
          description: The Id of the region to fetch informations for.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionInformations'
  /bookmarks/projects:
    post:
      tags:
        - bookmarks
      summary: Save a bookmark for a project.
      description: This can only be done by the user.
      operationId: bookmarkProject
      parameters:
        - name: userToken
          in: query
          description: The token from the user.
          required: true
          schema:
            type: string
        - name: projectId
          in: query
          description: The Id of the project to bookmark.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully saved the bookmark.
    delete:
      tags:
        - bookmarks
      summary: Delete a bookmark for a project.
      description: This can only be done by the user.
      operationId: deleteProjectBookmark
      parameters:
        - name: userToken
          in: query
          description: The token from the user.
          required: true
          schema:
            type: string
        - name: projectId
          in: query
          description: The Id of the project to delete.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the bookmark.
  /bookmarks/associations:
    post:
      tags:
        - bookmarks
      summary: Save a bookmark for an association.
      description: This can only be done by the user.
      operationId: bookmarkAssocisation
      parameters:
        - name: userToken
          in: query
          description: The token from the user.
          required: true
          schema:
            type: string
        - name: assocId
          in: query
          description: The Id of the association to bookmark.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully saved the bookmark.
    delete:
      tags:
        - bookmarks
      summary: Delete a bookmark for an association.
      description: This can only be done by the user.
      operationId: deleteAssociationBookmark
      parameters:
        - name: userToken
          in: query
          description: The token from the user.
          required: true
          schema:
            type: string
        - name: assocId
          in: query
          description: The Id of the association to delete.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the bookmark.

  /fragenkatalog:
    get:
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Frage'

components:
  schemas:
    User:
       type: object
       properties:
         username:
           type: string
           description: The username for the new user.
           example: exampleuser
         password:
           type: string
           description: The password for the new user.
           example: supersecret
         icon:
           type: string
           format: binary
           description: An icon image for the user's profile.
       required:
         - username
         - password
    Location:
      type: object
      properties:
        lat:
          type: double
          example: 110.574
          description: Latitude of the location.
        long:
          type: double
          example: 111.320
          description: Longitude of the loaction.
    AssociationInformations:
      type: object
      properties:
        assocId:
          type: integer
          example: 1
          description: The Id of the association.
        name:
          type: string
          example: New Roots
          description: Name of the association corresponding to the assocId.
        description:
          type: string
          example: New Roots is ...
          description: Stored short description of the association, originally
                       provided by them.
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images provided by the association.
        webpageUrl:
          type: string
          example: path/to/new/roots.de
          description: Url of the associations website.
        donatePageUrl:
          type: string
          example: path/to/new/roots/donation/link.de
          description: Direct link to the donation side of the association.
      required:
        - assocId
        - name
        - description
        - webpageUrl
    ProjectInformations:
      type: object
      properties:
        projectId:
          type: integer
          example: 1
          description: The Id of the project.
        name:
          type: string
          example: Great Green Wall
          description: Name of the project corresponding to the projectId.
        description:
          type: string
          example: The Great Green Wall is ...
          description: Stored short description of the project, originally
                       provided by the responsible association.
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images provided by the association.
        webpageUrl:
          type: string
          example: path/to/great/green/wall.com
          description: Url of the projects website.
        donatePageUrl:
          type: string
          example: path/to/great/green/wall/donation/link.com
          description: Direct link to the donation side for the project.
      required:
        - projectId
        - name
        - description
        - webpageUrl
    RegionInformations:
      type: object
      properties:
        regionId:
          type: integer
          example: 1
          description: The Id of the region.
        name:
          type: string
          example: Tropical Zone
          description: Name of the region.
        description:
          type: string
          example: The tropical zone is ...
          description: Stored short description of the region.
                       Retrieved externally.
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images for the region
        webpageUrl:
          type: string
          example: path/to/wiki/tropical/zone.com
          description: Url with informations to the region.
      required:
        - regionId
        - name
        - description
        - webpageUrl

    Frage:
      type: object
      properties:
        id:
          type: integer
        frage:
          type: string
        tagId:
          type: integer
