openapi: 3.0.3
info:
  title: Sprout API
  description:
    Sprout is an application to match potential donors with fitting charitable
    organizations. It provides an option for those organizations to present
    themselves as well as their projects with reduced effort and provides those
    descriptions in an interactive way to the users.
  license:
    name: GNU Affero General Public License v3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  version: 1.1.3
servers:
  - url: /api
tags:
  - name: user
    description: Operations for user management.
  - name: questions
    description: Operations about the initial questions, their answers and the
      filters they set.
  - name: map
    description: Operations concerning the map, this includes markers.
  - name: bookmarks
    description: Operations to manage bookmarks for a logged in user.
  - name: organization
    description: Operations to manage organizations and their projects.

paths:
  /questions:
    get:
      tags:
        - questions
      summary: Get a list of all questions.
      description: ''
      operationId: getQuestions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - questions
      summary: Send answers to the questions.
      description: ''
      operationId: postAnswers
      parameters:
        - $ref: '#/components/parameters/userToken'
        - name: answers
          in: query
          description: Answers to the questions.
          schema:
            $ref: '#/components/schemas/Answers'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /questions/{questionId}:
    get:
      tags:
        - questions
      summary: Get a question by ID.
      description: ''
      operationId: getQuestionById
      parameters:
        - name: questionId
          in: path
          description: ID of the question.
          required: true
          schema:
            type: integer
            example: 1
            description: Unique ID of the question.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /questions/filter:
    get:
      tags:
        - questions
      summary: Get filter settings for the active account.
      description: Request the stored filters for the active account. This
                   includes manual set filters as well as calculated ones.
      operationId: getFilters
      parameters:
        - $ref: '#/components/parameters/userToken'
      responses:
        '200':
          description: List of the filters to be activated.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  description: The tagId for a tag to be used for the filter.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/organization/locations:
    get:
      tags:
        - map
      summary: Get list of the locations from all organizations.
      description: This returns a List of GeoJSONSources to display the pins on
                   the map.
      operationId: getOrganizationsLocations
      parameters:
      - in: query
        style: deepObject
        name: answers
        schema:
          $ref: '#/components/schemas/AddPropsAnswers'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJsonOrganizations'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/organization/descriptions/{orgaId}:
    get:
      tags:
        - map
      summary: Get organization by Id.
      description: ''
      operationId: getOrganization
      parameters:
        - $ref: '#/components/parameters/orgaId'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDescriptions'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/organization/descriptions:
    get:
      tags:
        - map
      summary: Get list of descriptions for all organizations.
      description: ''
      operationId: getOrganizations
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    schema:
                      $ref: '#/components/schemas/OrganizationDescriptions'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/projects/locations:
    get:
      tags:
        - map
      summary: Get list of all ongoing projects locations.
      description: This returns a List of GeoJSONSources to display the pins on
                   the map.
      operationId: getProjectsLocations
      parameters:
      - in: query
        style: deepObject
        name: answers
        schema:
          $ref: '#/components/schemas/AddPropsAnswers'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJsonProjects'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/project/descriptions/{projectId}:
    get:
      tags:
        - map
      summary: Get project by ID.
      description: ''
      operationId: getProject
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDescriptions'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/project/descriptions:
    get:
      tags:
        - map
      summary: Get list of project descriptions.
      description: ''
      operationId: getProjects
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    schema:
                      $ref: '#/components/schemas/OrganizationDescriptions'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/region/locations:
    get:
      tags:
        - map
      summary: Get list of regions on the map.
      description: This returns a List of GeoJSONSources to display the pins on
                   the map.
      operationId: getRegions
      parameters:
      - in: query
        style: deepObject
        name: answers
        schema:
          $ref: '#/components/schemas/AddPropsAnswers'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJsonRegions'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/region/descriptions/{regionId}:
    get:
      tags:
        - map
      summary: Get region by ID.
      description: ''
      operationId: getRegion
      parameters:
        - name: regionId
          in: path
          description: The ID of the region to fetch descriptions for.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionDescriptions'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /bookmarks/projects:
    post:
      tags:
        - bookmarks
      summary: Save a bookmark for a project. This can only be done by the user.
      description: ''
      operationId: bookmarkProject
      parameters:
        - $ref: '#/components/parameters/userToken'
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - bookmarks
      summary: Delete a bookmark for a project.
      description: This can only be done by the user.
      operationId: deleteProjectBookmark
      parameters:
        - $ref: '#/components/parameters/userToken'
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /bookmarks/organizations:
    post:
      tags:
        - bookmarks
      summary: Save a bookmark for an organization. This can only be done by the
               user.
      description: ''
      operationId: bookmarkOrganization
      parameters:
        - $ref: '#/components/parameters/userToken'
        - $ref: '#/components/parameters/orgaId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - bookmarks
      summary: Delete a bookmark for an organization.
      description: This can only be done by the user.
      operationId: deleteOrganizationBookmark
      parameters:
        - $ref: '#/components/parameters/userToken'
        - $ref: '#/components/parameters/orgaId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /organization:
    post:
      tags:
        - organization
      summary: Register an organization.
      description: Register a new organization with Sprout and create the
                   corresponding account.
      operationId: registerOrganization
      requestBody:
        description: Create an organization.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ID'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    put:
      tags:
        - organization
      summary: Update organization. This can only be done by a logged in
               organization.
      description: Update informations to a given organization.
      operationId: updateOrganization
      parameters:
        - $ref: '#/components/parameters/orgaToken'
          required: true
        - name: organizationDescriptions
          in: query
          description: Update an existing organization.
          schema:
            $ref: '#/components/schemas/OrganizationDescriptions'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /organization/projects:
    post:
      tags:
        - organization
      summary: Create a project for an organization. This can only be done by a
               logged in organization.
      description: A project always belongs to the logged in organization.
      operationId: createProject
      requestBody:
        description: Create a project.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          $ref: '#/components/responses/ID'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    put:
      tags:
        - organization
      summary: Update a project. This can only be done by a logged in
               organization.
      description: Update an existing project from an organization.
      operationId: updateProject
      parameters:
        - $ref: '#/components/parameters/orgaToken'
        - name: projectDescriptions
          in: query
          description: Update an existing project.
          schema:
            $ref: '#/components/schemas/ProjectDescriptions'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - organization
      summary: Delete a project. This can only be done by a logged in
               organization.
      description: Delete a given project.
      operationId: deleteProject
      parameters:
        - $ref: '#/components/parameters/orgaToken'
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'

components:
  schemas:
    User:
       type: object
       properties:
         username:
           type: string
           description: The username for the new user.
           example: exampleuser
         password:
           type: string
           description: The password for the new user.
           example: supersecret
         icon:
           type: string
           format: binary
           description: An icon image for the user's profile.
       required:
         - username
         - password
    Question:
      type: object
      properties:
        questionId:
          type: integer
          example: 1
          description: Unique ID of the question.
        questionTitle:
          type: string
          example: Climate Action
          description: A descriptive title for the question.
          externalDocs:
            description: Possibly with external context e.g. the WHO
                         sustainability goals.
            url: https://sdgs.un.org/goals
        questionText:
          type: string
          example: Do you want to focus on environment protection?
          description: A pre made question for the user. This may contain
                       further explanations w.r.t. the title.
        questionImageUrl:
          type: string
          example: url/to/question/image.pic
          description: A picture supplementing the text of a question.
        tagId:
          type: integer
          example: 1
          description: The Id for a tag to be used for the filter.
    Answers:
      type: array
      description: Contains all IDs that have been answered positively.
      items:
        type: integer
        example: 1
        description: Unique ID of the question.
    GeoJsonOrganizations:
      type: object

      externalDocs:
        description: GepJSONSource specification
        url: https://maplibre.org/maplibre-gl-js/docs/API/classes/GeoJSONSource/
      properties:
        type: # Not a Keyword
          type: string
          enum: # Define a constant
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoFeatureOrganization'
      required:
        - type
        - features
    GeoFeatureOrganization:
      type: object
      properties:
        type: # Not a Keyword
          type: string
          enum:
            - Feature
        properties: # Not a keyword
          type: object
          properties:
            orgaId:
              type: integer
              example: 1
              description: ID of the organization for the application.
        geometry:
          $ref: '#/components/schemas/GeoGeometry'
    GeoJsonProjects:
      type: object
      externalDocs:
        description: GepJSONSource specification
        url: https://maplibre.org/maplibre-gl-js/docs/API/classes/GeoJSONSource/
      properties:
        type: # Not a Keyword
          type: string
          enum: # Define a constant
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoFeatureProject'
      required:
        - type
        - features
    GeoFeatureProject:
      type: object
      properties:
        type: # Not a Keyword
          type: string
          enum:
            - Feature
        properties: # Not a keyword
          type: object
          properties:
            projectId:
              type: integer
              example: 1
              description: ID of a project for an organization.
        geometry:
          $ref: '#/components/schemas/GeoGeometry'
    GeoJsonRegions:
      type: object
      externalDocs:
        description: GepJSONSource specification
        url: https://maplibre.org/maplibre-gl-js/docs/API/classes/GeoJSONSource/
      properties:
        type: # Not a Keyword
          type: string
          enum: # Define a constant
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoFeatureRegion'
      required:
        - type
        - features
    GeoFeatureRegion:
      type: object
      properties:
        type: # Not a Keyword
          type: string
          enum:
            - Feature
        properties: # Not a keyword
          type: object
          properties:
            regionId:
              type: integer
              example: 1
              description: ID of a region on the map.
            name:
              type: string
              example: Africa
              description: Name of the region.
        geometry:
          $ref: '#/components/schemas/GeoGeometry'
    GeoGeometry:
      type: object
      properties:
        type: # Not a keyword
          type: string
          enum:
            - Point
        coordinates:
          type: array
          items:
            type: number
          description: Longitude and latitude coordinates.
          example: [-76.53063297271729, 39.18174077994108]
      required:
        - type
        - coordinates
    OrganizationDescriptions:
      type: object
      properties:
        orgaId:
          type: integer
          example: 1
          description: The ID of the organization.
        name:
          type: string
          example: New Roots
          description: Name of the organization corresponding to the Id of the
                       organization.
        description: # Not a keyword
          type: string
          example: New Roots is ...
          description: Stored short description of the organization, originally
                       provided by them.
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images provided by the organization.
        webpageUrl:
          type: string
          example: path/to/new/roots.de
          description: URL of the organizations website.
        donatePageUrl:
          type: string
          example: path/to/new/roots/donation/link.de
          description: Direct link to the donation side of the organization.
      required:
        - orgaId
        - name
        - description
        - webpageUrl
    ProjectDescriptions:
      type: object
      properties:
        projectId:
          type: integer
          example: 1
          description: The ID of the project.
        name:
          type: string
          example: Great Green Wall
          description: Name of the project corresponding to the provided ID.
        description:
          type: string
          example: The Great Green Wall is ...
          description: Stored short description of the project, originally
                       provided by the responsible organization.
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images provided by the organization.
        webpageUrl:
          type: string
          example: path/to/great/green/wall.com
          description: URL of the projects website.
        donatePageUrl:
          type: string
          example: path/to/great/green/wall/donation/link.com
          description: Direct link to the donation side for the project.
      required:
        - projectId
        - name
        - description
    RegionDescriptions:
      type: object
      properties:
        regionId:
          type: integer
          example: 1
          description: The ID of the region.
        name:
          type: string
          example: Tropical Zone
          description: Name of the region.
        description:
          type: string
          example: The tropical zone is ...
          description: Stored short description of the region.
                       Retrieved externally.
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images for the region
        webpageUrl:
          type: string
          example: path/to/wiki/tropical/zone.com
          description: Url with descriptions to the region.
      required:
        - regionId
        - name
        - description
        - webpageUrl
    Organization:
      type: object
      properties:
        name:
          type: string
          example: New Roots
          description: Name of the organization corresponding to the given ID.
        description:
          type: string
          example: New Roots is ...
          description: Stored short description of the organization, originally
                       provided by them.
        password:
          type: string
          description: The password for the new organization.
          example: supersecret
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images provided by the organization.
        webpageUrl:
          type: string
          example: path/to/new/roots.de
          description: URL of the organizations website.
        donatePageUrl:
          type: string
          example: path/to/new/roots/donation/link.de
          description: Direct link to the donation side of the organization.
      required:
        - name
        - password
        - description
        - webpageUrl
    Project:
      type: object
      properties:
        orgaToken:
          type: string
          description: Token of the logged in organization.
        name:
          type: string
          example: Great Green Wall
          description: Name of the project corresponding to the logged in
                       organization.
        description:
          type: string
          example: The Great Green Wall is ...
          description: Stored short description of the project, originally
                       provided by the responsible organization.
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images provided by the organization.
        webpageUrl:
          type: string
          example: path/to/great/green/wall.com
          description: URL of the projects website.
        donatePageUrl:
          type: string
          example: path/to/great/green/wall/donation/link.com
          description: Direct link to the donation side for the project.
      required:
        - orgaToken
        - name
        - description
        - webpageUrl
    AddPropsAnswers:
      type: object
      additionalProperties:
        type: string
        enum: [pos, neu, neg]
        description: The enum represents the possible answers to a question.
                     These questions are represented as *additionalProperties*,
                     due to their volatile behavior.
  responses:
    '200':
      description: Successful operation.
    'ID':
      description: Successful operation.
      content:
        text/plain:
          schema:
            type: integer
            example: 1
            description: Generated ID. Unique w.r.t. the type of ID.
    '400':
      description: Bad request. Provided request is malformed.
    '401':
      description: ID/ Token is missing or invalid.
    '404':
      description: Requested resource was not found.
    '5XX':
      description: Unexpected server error.
  parameters:
    userToken:
      name: userToken
      in: query
      description: Session token of the logged in user account.
      required: true
      schema:
        type: string
    orgaToken:
      name: orgaToken
      in: query
      description: Session token of the logged in organization account.
      required: true
      schema:
        type: string
    orgaId:
      name: orgaId
      in: query
      description: The unique ID from the organization.
      required: true
      schema:
        type: integer
    projectId:
      name: projectId
      in: query
      description: The unique ID from the project.
      required: true
      schema:
        type: integer
