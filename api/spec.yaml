openapi: 3.0.3
info:
  title: Sprout API
  description:
    Sprout is an application to match potential donors with fitting charitable
    organizations. It provides an option for those organizations to present
    themselves as well as their projects with reduced effort and provides those
    descriptions in an interactive way to the users.
  license:
    name: GNU Affero General Public License v3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  version: 1.2.8
servers:
  - url: /api
tags:
  - name: questions
    description: Operations about the initial questions, their answers and the
      filters they set.
  - name: map
    description: Operations concerning the map, this includes markers.
  - name: bookmarks
    description: Operations to manage bookmarks for a logged in user.
  - name: organization
    description: Operations to manage organizations and their projects.

paths:
  /questions:
    get:
      tags:
        - questions
      summary: Get a list of all questions.
      operationId: getQuestions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /answers:
    get:
      tags:
        - questions
      summary: Get answers to questions for the active account.
      operationId: getAnswers
      security:
        - userToken: []
      responses:
        '200':
          description: Answers to the questions. Given as a list of positively
                       answered question IDs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answers'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - questions
      summary: Post answers to questions for the active account.
      operationId: postAnswers
      security:
        - userToken: []
      requestBody:
        description: Answers to the questions. Given as a list of positively
                     answered question IDs.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answers'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/search:
    get:
      tags:
        - map
      summary: Get all organizations and projects that match the provided filter
               parameters.
      operationId: getMatches
      parameters:
        - in: query
          name: answers
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Answers'
        - in: query
          name: maxMembers
          description: The maximal member count a organization is allowed to
                       have, to match the parameters.
          schema:
            type: integer
            example: 100
        - in: query
          name: searchText
          description: Manually provided by the user. May contain spaces.
          schema:
            type: string
            example: foo
        - in: query
          name: continentId
          description: Internal ID of a continent (we include oceans).
          schema:
            type: string
            example: europe
        - in: query
          name: regionId
          description: This parameter should be ignored if continentId is
                       absent.
          schema:
            $ref: '#/components/schemas/RegionId'
        - in: query
          name: type # Not a keyword
          schema:
            $ref: '#/components/schemas/ObjectType'
      responses:
        '200':
          description: List of organizations and/ or projects that match the
                       provided filters to a certain degree.
          content:
            application/json:
              schema:
                type: object
                properties:
                  rankings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rankings'
                    description: Contains a list of organizations as well as
                                 projects that match the provided filter parameters
                                 to some degree.
                  organizationLocations:
                    $ref: '#/components/schemas/GeoJsonOrganizations'
                  projectLocations:
                    $ref: '#/components/schemas/GeoJsonProjects'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/organizations/{id}:
    get:
      tags:
        - map
      summary: Get organization by Id.
      operationId: getOrganizationById
      parameters:
        - name: id
          in: path
          description: The unique ID from the organization.
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OrganizationWithId'
                  - $ref: '#/components/schemas/RegionName'
                  - type: object
                    properties:
                       projects:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/ProjectWithId'
                            - $ref: '#/components/schemas/RegionName'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/projects/{id}:
    get:
      tags:
        - map
      summary: Get project by ID.
      operationId: getProjectById
      parameters:
        - name: id
          in: path
          description: The unique ID from the project.
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProjectWithId'
                  - $ref: '#/components/schemas/RegionName'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /map/regions:
    get:
      tags:
        - map
      summary: Get list of regions on the map.
      operationId: getRegions
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: europe
                      description: The internal ID of a continent or ocean.
                    name:
                      type: string
                      example: Europa
                      description: The name of a continent or ocean.
                    regions:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            $ref: '#/components/schemas/RegionId'
                          name:
                            type: string
                            example: Deutschland
                            description: The name of the region, provided in the
                                         language of the application.
                  description: An object containing one continent or ocean and
                               a list of the regions located in this place. 
                description: List of all continents as well as oceans and
                             their regions.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /bookmarks/projects:
    get:
      tags:
        - bookmarks
      summary: Get project-bookmarks for the active account.
      operationId: getProjectBookmarks
      security:
        - userToken: []
      responses:
        '200':
          description: List of the project-bookmarks.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  description: The ID for a bookmarked project.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - bookmarks
      summary: Save a bookmark for a project. This can only be done by the user.
      operationId: postProjectBookmark
      security:
        - userToken: []
      parameters:
        - $ref: '#/components/parameters/queryId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - bookmarks
      summary: Delete a bookmark for a project.
      description: This can only be done by the user.
      operationId: deleteProjectBookmark
      security:
        - userToken: []
      parameters:
        - $ref: '#/components/parameters/queryId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /bookmarks/organizations:
    get:
      tags:
        - bookmarks
      summary: Get organization-bookmarks for the active account.
      operationId: getOrganizationBookmarks
      security:
        - userToken: []
      responses:
        '200':
          description: List of the organization-bookmarks.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  description: The ID for a bookmarked organization.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - bookmarks
      summary: Save a bookmark for an organization. This can only be done by the
               user.
      operationId: postOrganizationBookmark
      security:
        - userToken: []
      parameters:
        - $ref: '#/components/parameters/queryId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - bookmarks
      summary: Delete a bookmark for an organization.
      operationId: deleteOrganizationBookmark
      security:
        - userToken: []
      parameters:
        - $ref: '#/components/parameters/queryId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /organizations:
    get:
      tags:
        - organization
      summary: Get organization informations.
      operationId: getOrganization
      security:
        - orgaToken: []
      responses:
        '200':
          description: Organization informations.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OrganizationWithId'
                  - $ref: '#/components/schemas/RegionName'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - organization
      summary: Create a visible organization for an existing account of this
               type. This can only be done once per account.
      operationId: postOrganization
      security:
        - orgaToken: []
      requestBody:
        description: Register an organization.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ID'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    put:
      tags:
        - organization
      summary: Update informations to a given organization. This can only be
               done by a logged in organization.
      operationId: putOrganization
      security:
        - orgaToken: []
      requestBody:
        description: Update an existing organization.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationWithId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /organizations/projects:
    get:
      tags:
        - organization
      summary: Get project informations for the authenticated organization.
      operationId: getProjectsForOrganization
      security:
        - orgaToken: []
      responses:
        '200':
          description: Project informations.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/ProjectWithId'
                    - $ref: '#/components/schemas/RegionName'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - organization
      summary: Create a project for an organization. This can only be done by a
               logged in organization.
      operationId: postProject
      security:
        - orgaToken: []
      requestBody:
        description: The data of the new Project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ID'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    put:
      tags:
        - organization
      summary: Update a project. This can only be done by a logged in
               organization.
      operationId: putProject
      security:
        - orgaToken: []
      requestBody:
        description: The existing project with the matching ID is fully
                     overwritten with this.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectWithId'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - organization
      summary: Delete a project. This can only be done by a logged in
               organization.
      operationId: deleteProject
      security:
        - orgaToken: []
      parameters:
        - $ref: '#/components/parameters/queryId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'
  /tags:
    get:
      tags:
        - questions
      summary: Get a mapping from tag ID to tag name.
      operationId: getTags
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                      description: ID of the tag.
                    name:
                      type: string
                      example: Umwelt
                      description: Human readable name of the tag.
                  required:
                    - id
                    - name
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '5XX':
          $ref: '#/components/responses/5XX'

components:
  schemas:
    Question:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique ID of the question.
        title:
          type: string
          example: Climate Action
          description: A descriptive title for the question.
          externalDocs:
            description: Possibly with external context e.g. the WHO
                         sustainability goals.
            url: https://sdgs.un.org/goals
        text:
          type: string
          example: Do you want to focus on environment protection?
          description: A pre made question for the user. This may contain
                       further explanations w.r.t. the title.
        imageUrl:
          type: string
          example: url/to/question/image.pic
          description: A picture supplementing the text of a question.
      required:
        - id
        - title
        - text
        - imageUrl
    Answers:
      type: array
      description: Contains all IDs that have been answered positively.
      items:
        type: integer
        example: 1
        description: Unique ID of the question.
    GeoJsonOrganizations:
      type: object
      externalDocs:
        description: GepJSONSource specification
        url: https://maplibre.org/maplibre-gl-js/docs/API/classes/GeoJSONSource/
      properties:
        type: # Not a Keyword
          type: string
          enum: # Define a constant
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoFeatureOrganization'
      required:
        - type
        - features
    GeoFeatureOrganization:
      type: object
      properties:
        type: # Not a Keyword
          type: string
          enum:
            - Feature
        properties: # Not a keyword
          type: object
          properties:
            id:
              type: integer
              example: 1
              description: ID of the organization for the application.
        geometry:
          $ref: '#/components/schemas/GeoGeometry'
    GeoJsonProjects:
      type: object
      externalDocs:
        description: GepJSONSource specification
        url: https://maplibre.org/maplibre-gl-js/docs/API/classes/GeoJSONSource/
      properties:
        type: # Not a Keyword
          type: string
          enum: # Define a constant
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoFeatureProject'
      required:
        - type
        - features
    GeoFeatureProject:
      type: object
      properties:
        type: # Not a Keyword
          type: string
          enum:
            - Feature
        properties: # Not a keyword
          type: object
          properties:
            id:
              type: integer
              example: 1
              description: ID of a project for an organization.
          required:
            - id
        geometry:
          $ref: '#/components/schemas/GeoGeometry'
    GeoGeometry:
      type: object
      properties:
        type: # Not a keyword
          type: string
          enum:
            - Point
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
          description: Longitude and latitude coordinates.
          example: [-76.53063297271729, 39.18174077994108]
      required:
        - type
        - coordinates
    OrganizationId:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: The ID of the organization.
      required:
        - id
    Organization:
      type: object
      properties:
        name:
          type: string
          example: New Roots
          description: Name of the organization corresponding to the Id of the
                       organization.
        description: # Not a keyword
          type: string
          example: New Roots is ...
          description: Stored short description of the organization, originally
                       provided by them.
        foundingYear:
          type: integer
          example: 1998
          description: The founding year of the organization.
        memberCount:
          type: integer
          example: 7
          description: Number of persons in the organization. Can be used to
                       find organizations by size.
        iconUrl:
          type: string
          example: path/to/icon/url.pic
          description: Icon provided by the organization.
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images provided by the organization.
        webPageUrl:
          type: string
          example: path/to/new/roots.de
          description: URL of the organizations website.
        donatePageUrl:
          type: string
          example: path/to/new/roots/donation/link.de
          description: Direct link to the donation side of the organization.
        coordinates:
          type: array
          items:
            type: number
          description: Longitude and latitude coordinates of the organization's
                       location. For displaying on a map use the 
                       /map/organization/locations Endpoint to get the location
                       as GeoJSON features
          example: [-76.53063297271729, 39.18174077994108]
        tags:
          type: array
          items:
            type: integer
          example: [1, 4, 5]
          description: The tags of this organization
      required:
        - name
        - description
        - iconUrl
        - webPageUrl
        - coordinates
        - tags
    OrganizationWithId:
      allOf:
        - $ref: '#/components/schemas/OrganizationId'
        - $ref: '#/components/schemas/Organization'
    ProjectId:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: The ID of the project.
      required:
        - id
    Project:
      type: object
      properties:
        orgaId:
          type: integer
          example: 1
          description: The ID of the organization.
        name:
          type: string
          example: Great Green Wall
          description: Name of the project corresponding to the provided ID.
        description:
          type: string
          example: The Great Green Wall is ...
          description: Stored short description of the project, originally
                       provided by the responsible organization.
        dateFrom:
          type: string
          example: 2024-12
          description: Starting date of the project (only month and year). 
                       Needs to uphold the format.
        dateTo:
          type: string
          example: 2025-01
          description: Planned finish date of the project (only month and year).
                       Needs to uphold the format.
        iconUrl:
          type: string
          example: path/to/icon/url.pic
          description: Icon provided by the organization, defaults to the icon
                       of the organization.
        imageUrls:
          type: array
          items:
            type: string
            example: path/to/image/url.pic
            description: List of images provided by the organization.
        webPageUrl:
          type: string
          example: path/to/great/green/wall.com
          description: URL of the projects website.
        donatePageUrl:
          type: string
          example: path/to/great/green/wall/donation/link.com
          description: Direct link to the donation side for the project.
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
          description: Longitude and latitude coordinates of the projects
                       location. For displaying on a map use the /map/project/locations 
                       endpoint to get the location as GeoJSON feature
          example: [-76.53063297271729, 39.18174077994108]
        tags:
          type: array
          items:
            type: integer
          example: [1, 4, 5]
          description: The tags of this organization
      required:
        - orgaId
        - name
        - description
        - coordinates
        - tags
    RegionName:
      type: object
      properties:
        regionName:
          type: string
          example: Deutschland
          description: Name of the region, where the project takes place. UTF-8
                       encoded, human readable and in the language of the
                       application.
    ProjectWithId:
      allOf:
        - $ref: '#/components/schemas/ProjectId'
        - $ref: '#/components/schemas/Project'
    RegionId:
      type: string
      example: DE
      externalDocs:
        description: ISO 3166 country code for a region of the world.
        url: https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
    ObjectType:
      type: string
      enum: [Organization, Project]
      description: Represents the type of the accompanying or requested
                   object. This can be an Organization or a Project. If it is
                   an optional parameter and absent both types should be send.
    Rankings:
      type: object
      properties:
        type: # Not a keyword
          $ref: '#/components/schemas/ObjectType'
        content:
          oneOf:
            - allOf:
              - $ref: '#/components/schemas/OrganizationWithId'
              - $ref: '#/components/schemas/RegionName'
            - allOf:
              - $ref: '#/components/schemas/ProjectWithId'
              - $ref: '#/components/schemas/RegionName'
          description: An exhaustive description of either an
                       organization or a project, including the ID.
        percentageMatch:
          type: integer
          minimum: 0
          maximum: 100
          description: Describes how good the match is in
                       combination to the given filter parameters.
      description: Represents the type, description as well as match
                   percentage of one organization or project.
  responses:
    '200':
      description: Successful operation.
    'ID':
      description: Generated ID.
      content:
        text/plain:
          schema:
            type: integer
            example: 1
            description: Generated ID. Unique w.r.t. the type of ID.
    '400':
      description: Bad request. Provided request is malformed.
    '401':
      description: ID/ Token is missing or invalid.
    '404':
      description: Requested resource was not found.
    '5XX':
      description: Unexpected server error.
  parameters:
    queryId:
      name: id
      in: query
      description: The unique ID from the organization or project. This can be
                   derived from the path.
      required: true
      schema:
        type: integer
        example: 1
  securitySchemes:
    userToken:
      type: http
      scheme: bearer
    orgaToken:
      type: http
      scheme: bearer
