# Reuse existing password or generate new one if none exists
# Usage:
#     (include "generate-or-get-password" (dict "namespace" <namespace> "secret" <secret> "field" <field> ))
#     - namespace: Namespace to look for the secret in
#     - secret: Secret to lookup for existing password
#     - field: Field in secret that would contain existing password
{{- define "generate-or-get-password" }}
{{- $password := randAlphaNum 64 | b64enc }}
{{- $existing := (lookup "v1" "Secret" .namespace .secret) }}
{{- if $existing }}
  {{- $password = (coalesce (get $existing.data .field) $password) }}
{{- end }}
{{- $password }}
{{- end }}

{{- $dbPassword := (include "generate-or-get-password" (dict "namespace" .Release.Namespace "secret" "sprout-database-secret" "field" "password")) }}
{{- $dbPostgresPassword := (include "generate-or-get-password" (dict "namespace" .Release.Namespace "secret" "sprout-database-secret" "field" "postgres-password")) }}
{{- $authSecret := (include "generate-or-get-password" (dict "namespace" .Release.Namespace "secret" "sprout-frontend-secret" "field" "AUTH_SECRET")) }}

apiVersion: v1
kind: Secret
metadata:
  name: sprout-database-secret
  namespace: {{ .Release.Namespace }}
data:
  password: {{ $dbPassword }}
  postgres-password: {{ $dbPostgresPassword }}
---
apiVersion: v1
kind: Secret
metadata:
  name: sprout-backend-secret
  namespace: {{ .Release.Namespace }}
data:
  DB_PASSWORD: {{ $dbPassword }}
---
apiVersion: v1
kind: Secret
metadata:
  name: sprout-frontend-secret
  namespace: {{ .Release.Namespace }}
data:
  AUTH_SECRET: {{ $authSecret }}
